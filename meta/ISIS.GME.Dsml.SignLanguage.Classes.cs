//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISIS.GME.Dsml.SignLanguage.Classes
{
	using global::System.Linq;
	
	
	/// <summary>
	///<para>This API code is compatible with the following paradigm:</para>
	///<para> - Name: SignLanguage</para>
	///<para> - Guid: {344D86A3-E082-4C85-AE04-B49EF1C905DA}</para>
	///<para>Additional information: </para>
	///<para> - Date: 7/21/2014 11:46:24 AM</para>
	///<para> - Author: </para>
	///<para> - Version: </para>
	///<para> - Comment: </para>
	///</summary>
	///
	/// <summary>
	/// </summary>
	public class RootFolder : ISIS.GME.Common.Classes.RootFolder, ISIS.GME.Dsml.SignLanguage.Interfaces.RootFolder
	{
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public override global::System.Collections.Generic.Dictionary<int, global::System.Type> MetaRefs
		{
			get
			{
				return new global::System.Collections.Generic.Dictionary<int, global::System.Type>()
{
{1000, typeof(RootFolder) },
{1007, typeof(FloodSign) },
{1008, typeof(ParkingSign) },
{1009, typeof(StreetSign) },
{1010, typeof(Signs) }
}
;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public ISIS.GME.Dsml.SignLanguage.Classes.RootFolder.InfoClass Info
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.RootFolder.InfoClass();
			}
		}
		
		/// <summary>
		///<para>Contains the library's connection string if this object is an attached library.</para>
		///<para></para>
		///</summary>
		public string LibraryName
		{
			get
			{
				return (Impl as global::GME.MGA.MgaFolder).LibraryName;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific attached libraries.</para>
		///<para></para>
		///</summary>
		public global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.RootFolder> LibraryCollection
		{
			get
			{
				return ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.RootFolder, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "RootFolder");
			}
		}
		
		/// <para>Represents the domain specific parent container.</para>
		///<para></para>
		public override ISIS.GME.Common.Interfaces.Container ParentContainer
		{
			get
			{
if ((Impl as global::GME.MGA.MgaFolder).ParentFolder != null) { return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.RootFolder>((Impl as global::GME.MGA.MgaFolder).ParentFolder as global::GME.MGA.MgaObject); }
				return null;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific child objects.</para>
		///<para></para>
		///</summary>
		RootFolder.ChildrenClass ISIS.GME.Dsml.SignLanguage.Interfaces.RootFolder.Children
		{
			get
			{
				return new RootFolder.ChildrenClass(((global::GME.MGA.MgaFolder)(this.Impl)));
			}
		}
		
		/// <summary>
		///<para>Contains all the domain specific child objects.</para>
		///<para></para>
		///</summary>
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Base> AllChildren
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Base> result = ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.RootFolder, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "RootFolder");
				result = result.Concat(ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.Signs, global::GME.MGA.MgaObjects>(Impl.ChildObjects, 1010/*"Signs"*/));
				return result;
			}
		}
		
		/// Gets the root folder form an Mga project.
		public new static ISIS.GME.Dsml.SignLanguage.Interfaces.RootFolder GetRootFolder(global::GME.MGA.MgaProject project)
		{
			return ISIS.GME.Common.Utils.CreateObject<RootFolder>(project.RootFolder as global::GME.MGA.MgaObject);
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class InfoClass
		{
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public global::System.Guid ParadigmGuid
			{
				get
				{
					return new global::System.Guid("{344D86A3-E082-4C85-AE04-B49EF1C905DA}");
				}
			}
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public string ParadigmName
			{
				get
				{
					return "SignLanguage";
				}
			}
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public string ParadigmVersion
			{
				get
				{
					return "";
				}
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ChildrenClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			private global::GME.MGA.MgaFolder ImplFolder;
			
			private global::GME.MGA.MgaModel ImplModel;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ChildrenClass(global::GME.MGA.MgaFolder impl)
			{
				this.ImplFolder = impl;
				this.Impl = ((global::GME.MGA.IMgaObject)(impl));
			}
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ChildrenClass(global::GME.MGA.MgaModel impl)
			{
				this.ImplModel = impl;
				this.Impl = ((global::GME.MGA.IMgaObject)(impl));
			}
			
			/// <summary>
			///<para>
			///Retirves with specific kinds in the container.
			///</para>
			///</summary>
			///
			public global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.Signs> SignsCollection
			{
				get
				{
global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.Signs> result = ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.Signs, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "Signs" /* 1010 */);
return result;
				}
			}
		}
	}
	
	/// <summary>
	/// </summary>
	public class ParkingSign : ISIS.GME.Common.Classes.Atom, ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign
	{
		
		/// <summary>
		///<para>the object that is at the farthest position within the chain of base objects (i.e. the one which is not derived from anything).</para>
		///<para> NULL if the object is not derived.</para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.ArcheType
		{
			get
			{
				return (Impl as global::GME.MGA.MgaFCO).ArcheType == null ? null : ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign>((Impl as global::GME.MGA.MgaFCO).ArcheType as global::GME.MGA.MgaObject);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllSrcConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.SrcConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.SrcConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.SrcConnectionsClass(Impl);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllDstConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.DstConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.DstConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.DstConnectionsClass(Impl);
			}
		}
		
		/// <summary>
		///<para>Represents the domain specific parent container.</para>
		///<para></para>
		///<para>
		///----------------------------------------------------
		///</para>
		///<para>
		///The parent could be:
		///</para>
		///<para>
		///- Signs [Model]
		///</para>
		///</summary>
		///
		public override ISIS.GME.Common.Interfaces.Container ParentContainer
		{
			get
			{
global::GME.MGA.MgaObject parentFolder = (this.Impl as global::GME.MGA.MgaFCO).ParentFolder as global::GME.MGA.MgaObject;
global::GME.MGA.MgaObject parentModel = (this.Impl as global::GME.MGA.MgaFCO).ParentModel as global::GME.MGA.MgaObject;
if (parentModel != null && parentModel.MetaBase.MetaRef == 1010/*"Signs"*/) { return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>(parentModel); }
				return null;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific attributes.</para>
		///<para></para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.AttributesClass ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.Attributes
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.AttributesClass(this.Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllReferencedBy
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastReferencedBy(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.ReferencedByClass ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.ReferencedBy
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.ReferencedByClass(Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllMembersOfSet
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastMembersOfSet(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.MembersOfSetClass ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign.MembersOfSet
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign.MembersOfSetClass(Impl);
			}
		}
		
		/// Creates an object in a container.
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign Create(ISIS.GME.Dsml.SignLanguage.Interfaces.Signs parent, DefaultRole roleStr = DefaultRole.ParkingSign)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign>(parent, "" + roleStr.ToString());
		}
		
		/// <summary>
		/// Gets a domain specific object from a COM object.
		/// </summary>
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign Cast(global::GME.MGA.IMgaObject subject)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign>(subject);
		}
		
		/// Default role
		public enum DefaultRole
		{
			
			/// <summary>
			/// Default role
			/// </summary>
			ParkingSign,
		}
		
		/// <summary>
		///<para>WARNING: This part is still under developement.</para>
		///<para></para>
		///</summary>
		public struct Roles
		{
			
			/// Roles for Signs parent.
			public enum Signs
			{
				
				/// <summary>
				/// ParkingSign
				/// </summary>
				ParkingSign = 1012,
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class SrcConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public SrcConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class DstConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public DstConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class AttributesClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public AttributesClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
			
			/// <summary>
			/// <para>ParkingIconMap attribute</para>
			/// <para>Map from boolean to icon filename (boolean value: icon_filename).</para>
			/// </summary>
			public string ParkingIconMap
			{
				get
				{
					return ((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["ParkingIconMap"];
				}
				set
				{
					((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["ParkingIconMap"] = value;
				}
			}
			
			/// <summary>
			/// <para>Parking attribute</para>
			/// </summary>
			public bool Parking
			{
				get
				{
					return ((global::GME.MGA.MgaFCO)(Impl)).BoolAttrByName["Parking"];
				}
				set
				{
					((global::GME.MGA.MgaFCO)(Impl)).BoolAttrByName["Parking"] = value;
				}
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ReferencedByClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ReferencedByClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class MembersOfSetClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public MembersOfSetClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
	}
	
	/// <summary>
	/// </summary>
	public class FloodSign : ISIS.GME.Common.Classes.Atom, ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign
	{
		
		/// <summary>
		///<para>the object that is at the farthest position within the chain of base objects (i.e. the one which is not derived from anything).</para>
		///<para> NULL if the object is not derived.</para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.ArcheType
		{
			get
			{
				return (Impl as global::GME.MGA.MgaFCO).ArcheType == null ? null : ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.FloodSign>((Impl as global::GME.MGA.MgaFCO).ArcheType as global::GME.MGA.MgaObject);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllSrcConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.SrcConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.SrcConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.SrcConnectionsClass(Impl);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllDstConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.DstConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.DstConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.DstConnectionsClass(Impl);
			}
		}
		
		/// <summary>
		///<para>Represents the domain specific parent container.</para>
		///<para></para>
		///<para>
		///----------------------------------------------------
		///</para>
		///<para>
		///The parent could be:
		///</para>
		///<para>
		///- Signs [Model]
		///</para>
		///</summary>
		///
		public override ISIS.GME.Common.Interfaces.Container ParentContainer
		{
			get
			{
global::GME.MGA.MgaObject parentFolder = (this.Impl as global::GME.MGA.MgaFCO).ParentFolder as global::GME.MGA.MgaObject;
global::GME.MGA.MgaObject parentModel = (this.Impl as global::GME.MGA.MgaFCO).ParentModel as global::GME.MGA.MgaObject;
if (parentModel != null && parentModel.MetaBase.MetaRef == 1010/*"Signs"*/) { return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>(parentModel); }
				return null;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific attributes.</para>
		///<para></para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.AttributesClass ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.Attributes
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.AttributesClass(this.Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllReferencedBy
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastReferencedBy(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.ReferencedByClass ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.ReferencedBy
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.ReferencedByClass(Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllMembersOfSet
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastMembersOfSet(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.MembersOfSetClass ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign.MembersOfSet
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.FloodSign.MembersOfSetClass(Impl);
			}
		}
		
		/// Creates an object in a container.
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign Create(ISIS.GME.Dsml.SignLanguage.Interfaces.Signs parent, DefaultRole roleStr = DefaultRole.FloodSign)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.FloodSign>(parent, "" + roleStr.ToString());
		}
		
		/// <summary>
		/// Gets a domain specific object from a COM object.
		/// </summary>
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign Cast(global::GME.MGA.IMgaObject subject)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.FloodSign>(subject);
		}
		
		/// Default role
		public enum DefaultRole
		{
			
			/// <summary>
			/// Default role
			/// </summary>
			FloodSign,
		}
		
		/// <summary>
		///<para>WARNING: This part is still under developement.</para>
		///<para></para>
		///</summary>
		public struct Roles
		{
			
			/// Roles for Signs parent.
			public enum Signs
			{
				
				/// <summary>
				/// FloodSign
				/// </summary>
				FloodSign = 1011,
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class SrcConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public SrcConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class DstConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public DstConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class AttributesClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public AttributesClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
			
			/// <summary>
			/// <para>FloodIconMap attribute</para>
			/// <para>List of flood levels and icons ( level (in ft): icon filename ).</para>
			/// </summary>
			public string FloodIconMap
			{
				get
				{
					return ((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["FloodIconMap"];
				}
				set
				{
					((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["FloodIconMap"] = value;
				}
			}
			
			/// <summary>
			/// <para>FloodLevel attribute</para>
			/// <para>Enter flood level in feet.</para>
			/// </summary>
			public double FloodLevel
			{
				get
				{
					return ((global::GME.MGA.MgaFCO)(Impl)).FloatAttrByName["FloodLevel"];
				}
				set
				{
					((global::GME.MGA.MgaFCO)(Impl)).FloatAttrByName["FloodLevel"] = value;
				}
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ReferencedByClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ReferencedByClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class MembersOfSetClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public MembersOfSetClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
	}
	
	/// <summary>
	/// </summary>
	public class StreetSign : ISIS.GME.Common.Classes.Atom, ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign
	{
		
		/// <summary>
		///<para>the object that is at the farthest position within the chain of base objects (i.e. the one which is not derived from anything).</para>
		///<para> NULL if the object is not derived.</para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.ArcheType
		{
			get
			{
				return (Impl as global::GME.MGA.MgaFCO).ArcheType == null ? null : ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.StreetSign>((Impl as global::GME.MGA.MgaFCO).ArcheType as global::GME.MGA.MgaObject);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllSrcConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.SrcConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.SrcConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.SrcConnectionsClass(Impl);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllDstConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.DstConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.DstConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.DstConnectionsClass(Impl);
			}
		}
		
		/// <summary>
		///<para>Represents the domain specific parent container.</para>
		///<para></para>
		///<para>
		///----------------------------------------------------
		///</para>
		///<para>
		///The parent could be:
		///</para>
		///<para>
		///- Signs [Model]
		///</para>
		///</summary>
		///
		public override ISIS.GME.Common.Interfaces.Container ParentContainer
		{
			get
			{
global::GME.MGA.MgaObject parentFolder = (this.Impl as global::GME.MGA.MgaFCO).ParentFolder as global::GME.MGA.MgaObject;
global::GME.MGA.MgaObject parentModel = (this.Impl as global::GME.MGA.MgaFCO).ParentModel as global::GME.MGA.MgaObject;
if (parentModel != null && parentModel.MetaBase.MetaRef == 1010/*"Signs"*/) { return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>(parentModel); }
				return null;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific attributes.</para>
		///<para></para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.AttributesClass ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.Attributes
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.AttributesClass(this.Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllReferencedBy
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastReferencedBy(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.ReferencedByClass ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.ReferencedBy
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.ReferencedByClass(Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllMembersOfSet
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastMembersOfSet(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.MembersOfSetClass ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign.MembersOfSet
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.MembersOfSetClass(Impl);
			}
		}
		
		/// Creates an object in a container.
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign Create(ISIS.GME.Dsml.SignLanguage.Interfaces.Signs parent, DefaultRole roleStr = DefaultRole.StreetSign)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.StreetSign>(parent, "" + roleStr.ToString());
		}
		
		/// <summary>
		/// Gets a domain specific object from a COM object.
		/// </summary>
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign Cast(global::GME.MGA.IMgaObject subject)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.StreetSign>(subject);
		}
		
		/// Default role
		public enum DefaultRole
		{
			
			/// <summary>
			/// Default role
			/// </summary>
			StreetSign,
		}
		
		/// <summary>
		///<para>WARNING: This part is still under developement.</para>
		///<para></para>
		///</summary>
		public struct Roles
		{
			
			/// Roles for Signs parent.
			public enum Signs
			{
				
				/// <summary>
				/// StreetSign
				/// </summary>
				StreetSign = 1013,
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class SrcConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public SrcConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class DstConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public DstConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class AttributesClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public AttributesClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
			
			/// <summary>
			/// <para>StreetSignTypes attribute</para>
			/// </summary>
			public StreetSignTypes_enum StreetSignTypes
			{
				get
				{
					global::System.Array a = global::System.Enum.GetValues(typeof(ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.AttributesClass.StreetSignTypes_enum));
					int number = ISIS.GME.Common.Utils.GetEnumItemNumber(Impl as global::GME.MGA.MgaFCO, "StreetSignTypes");
					return (ISIS.GME.Dsml.SignLanguage.Classes.StreetSign.AttributesClass.StreetSignTypes_enum)a.GetValue(number);
				}
				set
				{
					ISIS.GME.Common.Utils.SetEnumItem(Impl as global::GME.MGA.MgaFCO, "StreetSignTypes", (int)value);;
				}
			}
			
			/// <summary>
			/// <para>StreetSignIconMap attribute</para>
			/// <para>Create a list that assigns icons to each item in the enumeration ( Sign type string: icon filename ).</para>
			/// </summary>
			public string StreetSignIconMap
			{
				get
				{
					return ((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["StreetSignIconMap"];
				}
				set
				{
					((global::GME.MGA.MgaFCO)(Impl)).StrAttrByName["StreetSignIconMap"] = value;
				}
			}
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public enum StreetSignTypes_enum
			{
				
				/// <summary>
				/// Stop
				/// </summary>
				Stop = 0,
				
				/// <summary>
				/// Yield
				/// </summary>
				Yield = 1,
				
				/// <summary>
				/// Crosswalk
				/// </summary>
				Crosswalk = 2,
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ReferencedByClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ReferencedByClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class MembersOfSetClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public MembersOfSetClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
	}
	
	/// <summary>
	/// </summary>
	public class Signs : ISIS.GME.Common.Classes.Model, ISIS.GME.Dsml.SignLanguage.Interfaces.Signs
	{
		
		/// <summary>
		///<para>the object that is at the farthest position within the chain of base objects (i.e. the one which is not derived from anything).</para>
		///<para> NULL if the object is not derived.</para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Interfaces.Signs ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.ArcheType
		{
			get
			{
				return (Impl as global::GME.MGA.MgaFCO).ArcheType == null ? null : ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>((Impl as global::GME.MGA.MgaFCO).ArcheType as global::GME.MGA.MgaObject);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllSrcConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.SrcConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.SrcConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.SrcConnectionsClass(Impl);
			}
		}
		
		/// 
		public override global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Connection> AllDstConnections
		{
			get
			{
				return new ISIS.GME.Common.Interfaces.Connection[] {};
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.DstConnectionsClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.DstConnections
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.DstConnectionsClass(Impl);
			}
		}
		
		/// <summary>
		///<para>Represents the domain specific parent container.</para>
		///<para></para>
		///<para>
		///----------------------------------------------------
		///</para>
		///<para>
		///The parent could be:
		///</para>
		///<para>
		///- RootFolder [Folder]
		///</para>
		///</summary>
		///
		public override ISIS.GME.Common.Interfaces.Container ParentContainer
		{
			get
			{
global::GME.MGA.MgaObject parentFolder = (this.Impl as global::GME.MGA.MgaFCO).ParentFolder as global::GME.MGA.MgaObject;
if (parentFolder != null && parentFolder.MetaBase.MetaRef == 1000/*"RootFolder"*/) { return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.RootFolder>(parentFolder); }
global::GME.MGA.MgaObject parentModel = (this.Impl as global::GME.MGA.MgaFCO).ParentModel as global::GME.MGA.MgaObject;
				return null;
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific attributes.</para>
		///<para></para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.AttributesClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.Attributes
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.AttributesClass(this.Impl);
			}
		}
		
		/// <summary>
		///<para>Contains the domain specific child objects.</para>
		///<para></para>
		///</summary>
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.ChildrenClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.Children
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.ChildrenClass(((global::GME.MGA.MgaModel)(this.Impl)));
			}
		}
		
		/// <summary>
		///<para>Contains all the domain specific child objects.</para>
		///<para></para>
		///</summary>
		public override global::System.Collections.Generic.IEnumerable<global::ISIS.GME.Common.Interfaces.Base> AllChildren
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.Base> result = ISIS.GME.Common.Utils.CastMgaChildren(Impl.ChildObjects, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() { 
{ 1008 /*ParkingSign*/ , typeof(ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign ) },
{ 1007 /*FloodSign*/ , typeof(ISIS.GME.Dsml.SignLanguage.Classes.FloodSign ) },
{ 1009 /*StreetSign*/ , typeof(ISIS.GME.Dsml.SignLanguage.Classes.StreetSign ) },
});
;
				return result;
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllReferencedBy
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastReferencedBy(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.ReferencedByClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.ReferencedBy
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.ReferencedByClass(Impl);
			}
		}
		
		/// 
		public virtual global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> AllMembersOfSet
		{
			get
			{
				global::System.Collections.Generic.IEnumerable<ISIS.GME.Common.Interfaces.FCO> result = ISIS.GME.Common.Utils.CastMembersOfSet(Impl as global::GME.MGA.MgaFCO, new global::System.Collections.Generic.Dictionary<int, global::System.Type>() {
});
				return result;
			}
		}
		
		ISIS.GME.Dsml.SignLanguage.Classes.Signs.MembersOfSetClass ISIS.GME.Dsml.SignLanguage.Interfaces.Signs.MembersOfSet
		{
			get
			{
				return new ISIS.GME.Dsml.SignLanguage.Classes.Signs.MembersOfSetClass(Impl);
			}
		}
		
		/// Creates an object in the RootFolder.
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.Signs Create(ISIS.GME.Dsml.SignLanguage.Interfaces.RootFolder parent)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>(parent);
		}
		
		/// <summary>
		/// Gets a domain specific object from a COM object.
		/// </summary>
		public static ISIS.GME.Dsml.SignLanguage.Interfaces.Signs Cast(global::GME.MGA.IMgaObject subject)
		{
			return ISIS.GME.Common.Utils.CreateObject<ISIS.GME.Dsml.SignLanguage.Classes.Signs>(subject);
		}
		
		/// Default role
		public enum DefaultRole
		{
			
			/// <summary>
			/// Default role
			/// </summary>
			Signs,
		}
		
		/// <summary>
		///<para>WARNING: This part is still under developement.</para>
		///<para></para>
		///</summary>
		public struct Roles
		{
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class SrcConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public SrcConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class DstConnectionsClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public DstConnectionsClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class AttributesClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public AttributesClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ChildrenClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			private global::GME.MGA.MgaFolder ImplFolder;
			
			private global::GME.MGA.MgaModel ImplModel;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ChildrenClass(global::GME.MGA.MgaFolder impl)
			{
				this.ImplFolder = impl;
				this.Impl = ((global::GME.MGA.IMgaObject)(impl));
			}
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ChildrenClass(global::GME.MGA.MgaModel impl)
			{
				this.ImplModel = impl;
				this.Impl = ((global::GME.MGA.IMgaObject)(impl));
			}
			
			/// <summary>
			///<para>
			///Retirves with specific kinds in the container.
			///</para>
			///</summary>
			///
			public global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign> ParkingSignCollection
			{
				get
				{
global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.ParkingSign> result = ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.ParkingSign, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "ParkingSign" /* 1008 */);
return result;
				}
			}
			
			/// <summary>
			///<para>
			///Retirves with specific kinds in the container.
			///</para>
			///</summary>
			///
			public global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign> FloodSignCollection
			{
				get
				{
global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.FloodSign> result = ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.FloodSign, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "FloodSign" /* 1007 */);
return result;
				}
			}
			
			/// <summary>
			///<para>
			///Retirves with specific kinds in the container.
			///</para>
			///</summary>
			///
			public global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign> StreetSignCollection
			{
				get
				{
global::System.Collections.Generic.IEnumerable<ISIS.GME.Dsml.SignLanguage.Interfaces.StreetSign> result = ISIS.GME.Common.Utils.CastMgaChildren<ISIS.GME.Dsml.SignLanguage.Classes.StreetSign, global::GME.MGA.MgaObjects>(Impl.ChildObjects, "StreetSign" /* 1009 */);
return result;
				}
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class ReferencedByClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public ReferencedByClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
		
		/// <summary>
		///<para></para>
		///<para></para>
		///</summary>
		public class MembersOfSetClass
		{
			
			private global::GME.MGA.IMgaObject Impl;
			
			/// <summary>
			///<para></para>
			///<para></para>
			///</summary>
			public MembersOfSetClass(global::GME.MGA.IMgaObject impl)
			{
				this.Impl = impl;
			}
		}
	}
}
